//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DecisionWrapperCsharp {

public class Node : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Node(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Node obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Node obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Node() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libdesPINVOKE.delete_Node(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Node() : this(libdesPINVOKE.new_Node__SWIG_0(), true) {
  }

  public Node(int criteriaId) : this(libdesPINVOKE.new_Node__SWIG_1(criteriaId), true) {
  }

  public void addCriteriaOnNode(int criteriaId) {
    libdesPINVOKE.Node_addCriteriaOnNode(swigCPtr, criteriaId);
  }

  public void addChildNode(Node childNode) {
    libdesPINVOKE.Node_addChildNode(swigCPtr, Node.getCPtr(childNode));
  }

  public bool containsCriteria(int criteriaId) {
    bool ret = libdesPINVOKE.Node_containsCriteria(swigCPtr, criteriaId);
    return ret;
  }

  public NodesSet getChildNodes() {
    NodesSet ret = new NodesSet(libdesPINVOKE.Node_getChildNodes(swigCPtr), true);
    return ret;
  }

  public IntSet getCriteriaIdSet() {
    IntSet ret = new IntSet(libdesPINVOKE.Node_getCriteriaIdSet(swigCPtr), true);
    return ret;
  }

  public int getDepth() {
    int ret = libdesPINVOKE.Node_getDepth(swigCPtr);
    return ret;
  }

  public void setDepth(int depth, int criteriaCount) {
    libdesPINVOKE.Node_setDepth(swigCPtr, depth, criteriaCount);
  }

  public Node find(int criteriaId) {
    global::System.IntPtr cPtr = libdesPINVOKE.Node_find(swigCPtr, criteriaId);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public void deleteChilds() {
    libdesPINVOKE.Node_deleteChilds(swigCPtr);
  }

}

}
