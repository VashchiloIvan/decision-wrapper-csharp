//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MultiCriteriaCsharpApi {

public class OneStepMethods : global::System.IDisposable, global::System.Collections.IEnumerable, global::System.Collections.Generic.ICollection<OneStepMethod>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OneStepMethods(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OneStepMethods obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(OneStepMethods obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OneStepMethods() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libdesPINVOKE.delete_OneStepMethods(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public OneStepMethods(global::System.Collections.IEnumerable c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (OneStepMethod element in c) {
      this.AddLast(element);
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public OneStepMethodsNode First {
    get {
      if (Count == 0)
        return null;
      return new OneStepMethodsNode(getFirstIter(), this);
    }
  }

  public OneStepMethodsNode Last {
    get {
      if (Count == 0)
        return null;
      return new OneStepMethodsNode(getLastIter(), this);
    }
  }

  public OneStepMethodsNode AddFirst(OneStepMethod value) {
    push_front(value);
    return new OneStepMethodsNode(getFirstIter(), this);
  }

  public void AddFirst(OneStepMethodsNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_front(newNode.csharpvalue);
      newNode.iter = getFirstIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public OneStepMethodsNode AddLast(OneStepMethod value) {
    push_back(value);
    return new OneStepMethodsNode(getLastIter(), this);
  }

  public void AddLast(OneStepMethodsNode newNode) {
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      push_back(newNode.csharpvalue);
      newNode.iter = getLastIter();
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public OneStepMethodsNode AddBefore(OneStepMethodsNode node, OneStepMethod value) {
    return new OneStepMethodsNode(insertNode(node.iter, value), this);
  }

  public void AddBefore(OneStepMethodsNode node, OneStepMethodsNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      newNode.iter = insertNode(node.iter, newNode.csharpvalue);
      newNode.inlist = true;
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public OneStepMethodsNode AddAfter(OneStepMethodsNode node, OneStepMethod value) {
    node = node.Next;
    return new OneStepMethodsNode(insertNode(node.iter, value), this);
  }

  public void AddAfter(OneStepMethodsNode node, OneStepMethodsNode newNode) {
    ValidateNode(node);
    ValidateNewNode(newNode);
    if (!newNode.inlist) {
      if (node == this.Last)
        AddLast(newNode);
      else
      {
        node = node.Next;
        newNode.iter = insertNode(node.iter, newNode.csharpvalue);
        newNode.inlist = true;
      }
    } else {
      throw new global::System.InvalidOperationException("The " + newNode.GetType().Name + " node already belongs to a " + this.GetType().Name);
    }
  }

  public void Add(OneStepMethod value) {
    AddLast(value);
  }

  public void Remove(OneStepMethodsNode node) {
    ValidateNode(node);
    eraseIter(node.iter);
  }

  public void CopyTo(OneStepMethod[] array, int index) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0 || index > array.Length)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    OneStepMethodsNode node = this.First;
    if (node != null) {
      do {
        array[index++] = node.Value;
        node = node.Next;
      } while (node != null);
    }
  }

  internal void ValidateNode(OneStepMethodsNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
    if (!node.inlist || node.list != this) {
      throw new System.InvalidOperationException("node");
    }
  }

  internal void ValidateNewNode(OneStepMethodsNode node) {
    if (node == null) {
      throw new System.ArgumentNullException("node");
    }
  }

  global::System.Collections.Generic.IEnumerator<OneStepMethod> global::System.Collections.Generic.IEnumerable<OneStepMethod>.GetEnumerator() {
    return new OneStepMethodsEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new OneStepMethodsEnumerator(this);
  }

  public OneStepMethodsEnumerator GetEnumerator() {
    return new OneStepMethodsEnumerator(this);
  }

  public sealed class OneStepMethodsEnumerator : global::System.Collections.IEnumerator,
    global::System.Collections.Generic.IEnumerator<OneStepMethod>
  {
    private OneStepMethods collectionRef;
    private OneStepMethodsNode currentNode;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public OneStepMethodsEnumerator(OneStepMethods collection) {
      collectionRef = collection;
      currentNode = collection.First;
      currentIndex = 0;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public OneStepMethod Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (OneStepMethod)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      if (currentNode == null) {
        currentIndex = collectionRef.Count + 1;
        return false;
      }
      ++currentIndex;
      currentObject = currentNode.Value;
      currentNode = currentNode.Next;
      return true;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }

  public sealed class OneStepMethodsNode {
    internal OneStepMethods list;
    internal System.IntPtr iter;
    internal OneStepMethod csharpvalue;
    internal bool inlist;

    public OneStepMethodsNode(OneStepMethod value) {
      csharpvalue = value;
      inlist = false;
    }

    internal OneStepMethodsNode(System.IntPtr iter, OneStepMethods list) {
      this.list = list;
      this.iter = iter;
      inlist = true;
    }

    public OneStepMethods List {
      get {
        return this.list;
      }
    }

    public OneStepMethodsNode Next {
      get {
        if (list.getNextIter(iter) == System.IntPtr.Zero)
          return null;
        return new OneStepMethodsNode(list.getNextIter(iter), list);
      }
    }

    public OneStepMethodsNode Previous {
      get {
        if (list.getPrevIter(iter) == System.IntPtr.Zero)
          return null;
        return new OneStepMethodsNode(list.getPrevIter(iter), list);
      }
    }

    public OneStepMethod Value {
      get {
        return list.getItem(this.iter);
      }
      set {
        list.setItem(this.iter, value);
      }
    }

    public static bool operator==(OneStepMethodsNode node1, OneStepMethodsNode node2) {
      if (object.ReferenceEquals(node1, null) && object.ReferenceEquals(node2, null))
        return true;
      if (object.ReferenceEquals(node1, null) || object.ReferenceEquals(node2, null))
        return false;
      return node1.Equals(node2);
    }

    public static bool operator!=(OneStepMethodsNode node1, OneStepMethodsNode node2) {
      if (node1 == null && node2 == null)
        return false;
      if (node1 == null || node2 == null)
        return true;
      return !node1.Equals(node2);
    }

    public bool Equals(OneStepMethodsNode node) {
      if (node == null)
        return false;
      if (!node.inlist || !this.inlist)
        return object.ReferenceEquals(this, node);
      return list.equals(this.iter, node.iter);
    }

    public override bool Equals(object node) {
      return Equals((OneStepMethodsNode)node);
    }

    public override int GetHashCode() {
      int hash = 13;
      if (inlist) {
        hash = (hash * 7) + this.list.GetHashCode();
        hash = (hash * 7) + this.Value.GetHashCode();
        hash = (hash * 7) + this.list.getNextIter(this.iter).GetHashCode();
        hash = (hash * 7) + this.list.getPrevIter(this.iter).GetHashCode();
      } else {
        hash = (hash * 7) + this.csharpvalue.GetHashCode();
      }
      return hash;
    }

    public void Dispose() {
      list.deleteIter(this.iter);
    }
  }

  private void push_front(OneStepMethod x) {
    libdesPINVOKE.OneStepMethods_push_front(swigCPtr, OneStepMethod.getCPtr(x));
  }

  private void push_back(OneStepMethod x) {
    libdesPINVOKE.OneStepMethods_push_back(swigCPtr, OneStepMethod.getCPtr(x));
  }

  public void RemoveFirst() {
    libdesPINVOKE.OneStepMethods_RemoveFirst(swigCPtr);
  }

  public void RemoveLast() {
    libdesPINVOKE.OneStepMethods_RemoveLast(swigCPtr);
  }

  private uint size() {
    uint ret = libdesPINVOKE.OneStepMethods_size(swigCPtr);
    return ret;
  }

  public void Clear() {
    libdesPINVOKE.OneStepMethods_Clear(swigCPtr);
  }

  private OneStepMethod getItem(global::System.IntPtr iter) {
    global::System.IntPtr cPtr = libdesPINVOKE.OneStepMethods_getItem(swigCPtr, iter);
    OneStepMethod ret = (cPtr == global::System.IntPtr.Zero) ? null : new OneStepMethod(cPtr, false);
    return ret;
  }

  private void setItem(global::System.IntPtr iter, OneStepMethod val) {
    libdesPINVOKE.OneStepMethods_setItem(swigCPtr, iter, OneStepMethod.getCPtr(val));
  }

  private global::System.IntPtr getFirstIter() {
    global::System.IntPtr ret = libdesPINVOKE.OneStepMethods_getFirstIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getLastIter() {
    global::System.IntPtr ret = libdesPINVOKE.OneStepMethods_getLastIter(swigCPtr);
    return ret;
  }

  private global::System.IntPtr getNextIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = libdesPINVOKE.OneStepMethods_getNextIter(swigCPtr, iter);
    return ret;
  }

  private global::System.IntPtr getPrevIter(global::System.IntPtr iter) {
    global::System.IntPtr ret = libdesPINVOKE.OneStepMethods_getPrevIter(swigCPtr, iter);
    return ret;
  }

  public global::System.IntPtr insertNode(global::System.IntPtr iter, OneStepMethod value) {
    global::System.IntPtr ret = libdesPINVOKE.OneStepMethods_insertNode(swigCPtr, iter, OneStepMethod.getCPtr(value));
    return ret;
  }

  public void eraseIter(global::System.IntPtr iter) {
    libdesPINVOKE.OneStepMethods_eraseIter(swigCPtr, iter);
  }

  private void deleteIter(global::System.IntPtr iter) {
    libdesPINVOKE.OneStepMethods_deleteIter(swigCPtr, iter);
  }

  public bool equals(global::System.IntPtr iter1, global::System.IntPtr iter2) {
    bool ret = libdesPINVOKE.OneStepMethods_equals(swigCPtr, iter1, iter2);
    return ret;
  }

  public bool Contains(OneStepMethod value) {
    bool ret = libdesPINVOKE.OneStepMethods_Contains(swigCPtr, OneStepMethod.getCPtr(value));
    return ret;
  }

  public bool Remove(OneStepMethod value) {
    bool ret = libdesPINVOKE.OneStepMethods_Remove(swigCPtr, OneStepMethod.getCPtr(value));
    return ret;
  }

  private global::System.IntPtr find(OneStepMethod value) {
    global::System.IntPtr ret = libdesPINVOKE.OneStepMethods_find(swigCPtr, OneStepMethod.getCPtr(value));
    return ret;
  }

  public OneStepMethodsNode Find(OneStepMethod value) {
    System.IntPtr tmp = find(value);
    if (tmp != System.IntPtr.Zero) {
      return new OneStepMethodsNode(tmp, this);
    }
    return null;
  }

  public OneStepMethods() : this(libdesPINVOKE.new_OneStepMethods(), true) {
  }

}

}
