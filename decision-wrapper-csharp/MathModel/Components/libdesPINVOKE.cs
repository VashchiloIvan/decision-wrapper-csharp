//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class libdesPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="SWIGRegisterExceptionCallbacks_libdes")]
    public static extern void SWIGRegisterExceptionCallbacks_libdes(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_libdes")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_libdes(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_libdes(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_libdes(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="SWIGRegisterStringCallback_libdes")]
    public static extern void SWIGRegisterStringCallback_libdes(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_libdes(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static libdesPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Criteria__SWIG_0")]
  public static extern global::System.IntPtr new_Criteria__SWIG_0(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Criteria__SWIG_1")]
  public static extern global::System.IntPtr new_Criteria__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_Criteria")]
  public static extern void delete_Criteria(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criteria_getName")]
  public static extern string Criteria_getName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criteria_getType")]
  public static extern int Criteria_getType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criteria_setName")]
  public static extern void Criteria_setName(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criteria_setType")]
  public static extern void Criteria_setType(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_EstimateVector__SWIG_0")]
  public static extern global::System.IntPtr new_EstimateVector__SWIG_0(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_EstimateVector__SWIG_1")]
  public static extern global::System.IntPtr new_EstimateVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_EstimateVector")]
  public static extern void delete_EstimateVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVector_getName")]
  public static extern string EstimateVector_getName(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVector_getMarks")]
  public static extern global::System.IntPtr EstimateVector_getMarks(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVector_setMarks")]
  public static extern void EstimateVector_setMarks(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVector_ToString")]
  public static extern string EstimateVector_ToString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_MathModel__SWIG_0")]
  public static extern global::System.IntPtr new_MathModel__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_MathModel__SWIG_1")]
  public static extern global::System.IntPtr new_MathModel__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_MathModel")]
  public static extern void delete_MathModel(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_getCriteriaList")]
  public static extern global::System.IntPtr MathModel_getCriteriaList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_getEstimateVectorList")]
  public static extern global::System.IntPtr MathModel_getEstimateVectorList(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_sumByCriteria")]
  public static extern double MathModel_sumByCriteria(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_maxByCriteria")]
  public static extern double MathModel_maxByCriteria(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_minByCriteria")]
  public static extern double MathModel_minByCriteria(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_isValid")]
  public static extern bool MathModel_isValid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_isNormalized")]
  public static extern bool MathModel_isNormalized(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MathModel_ToString")]
  public static extern string MathModel_ToString(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Unifier_getUnifiedMathModel")]
  public static extern global::System.IntPtr Unifier_getUnifiedMathModel(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_Unifier")]
  public static extern void delete_Unifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_AlternativeUnifier_getUnifiedMathModel")]
  public static extern global::System.IntPtr AlternativeUnifier_getUnifiedMathModel(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_AlternativeUnifier")]
  public static extern global::System.IntPtr new_AlternativeUnifier();

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_AlternativeUnifier")]
  public static extern void delete_AlternativeUnifier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Normalizer_getNormalizedMathModel")]
  public static extern global::System.IntPtr Normalizer_getNormalizedMathModel(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_Normalizer")]
  public static extern void delete_Normalizer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MinMaxNormalizer_getNormalizedMathModel")]
  public static extern global::System.IntPtr MinMaxNormalizer_getNormalizedMathModel(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_MinMaxNormalizer")]
  public static extern global::System.IntPtr new_MinMaxNormalizer();

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_MinMaxNormalizer")]
  public static extern void delete_MinMaxNormalizer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Marks__SWIG_0")]
  public static extern global::System.IntPtr new_Marks__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Marks__SWIG_1")]
  public static extern global::System.IntPtr new_Marks__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Clear")]
  public static extern void Marks_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Add")]
  public static extern void Marks_Add(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_size")]
  public static extern uint Marks_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_empty")]
  public static extern bool Marks_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_capacity")]
  public static extern uint Marks_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_reserve")]
  public static extern void Marks_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Marks__SWIG_2")]
  public static extern global::System.IntPtr new_Marks__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_getitemcopy")]
  public static extern double Marks_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_getitem")]
  public static extern double Marks_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_setitem")]
  public static extern void Marks_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_AddRange")]
  public static extern void Marks_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_GetRange")]
  public static extern global::System.IntPtr Marks_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Insert")]
  public static extern void Marks_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, double jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_InsertRange")]
  public static extern void Marks_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_RemoveAt")]
  public static extern void Marks_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_RemoveRange")]
  public static extern void Marks_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Repeat")]
  public static extern global::System.IntPtr Marks_Repeat(double jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Reverse__SWIG_0")]
  public static extern void Marks_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Reverse__SWIG_1")]
  public static extern void Marks_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_SetRange")]
  public static extern void Marks_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Contains")]
  public static extern bool Marks_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_IndexOf")]
  public static extern int Marks_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_LastIndexOf")]
  public static extern int Marks_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Marks_Remove")]
  public static extern bool Marks_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, double jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_Marks")]
  public static extern void delete_Marks(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Criterias__SWIG_0")]
  public static extern global::System.IntPtr new_Criterias__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Criterias__SWIG_1")]
  public static extern global::System.IntPtr new_Criterias__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_Clear")]
  public static extern void Criterias_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_Add")]
  public static extern void Criterias_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_size")]
  public static extern uint Criterias_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_empty")]
  public static extern bool Criterias_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_capacity")]
  public static extern uint Criterias_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_reserve")]
  public static extern void Criterias_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_Criterias__SWIG_2")]
  public static extern global::System.IntPtr new_Criterias__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_getitemcopy")]
  public static extern global::System.IntPtr Criterias_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_getitem")]
  public static extern global::System.IntPtr Criterias_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_setitem")]
  public static extern void Criterias_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_AddRange")]
  public static extern void Criterias_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_GetRange")]
  public static extern global::System.IntPtr Criterias_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_Insert")]
  public static extern void Criterias_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_InsertRange")]
  public static extern void Criterias_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_RemoveAt")]
  public static extern void Criterias_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_RemoveRange")]
  public static extern void Criterias_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_Repeat")]
  public static extern global::System.IntPtr Criterias_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_Reverse__SWIG_0")]
  public static extern void Criterias_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_Reverse__SWIG_1")]
  public static extern void Criterias_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_Criterias_SetRange")]
  public static extern void Criterias_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_Criterias")]
  public static extern void delete_Criterias(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_EstimateVectors__SWIG_0")]
  public static extern global::System.IntPtr new_EstimateVectors__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_EstimateVectors__SWIG_1")]
  public static extern global::System.IntPtr new_EstimateVectors__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_Clear")]
  public static extern void EstimateVectors_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_Add")]
  public static extern void EstimateVectors_Add(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_size")]
  public static extern uint EstimateVectors_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_empty")]
  public static extern bool EstimateVectors_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_capacity")]
  public static extern uint EstimateVectors_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_reserve")]
  public static extern void EstimateVectors_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_new_EstimateVectors__SWIG_2")]
  public static extern global::System.IntPtr new_EstimateVectors__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_getitemcopy")]
  public static extern global::System.IntPtr EstimateVectors_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_getitem")]
  public static extern global::System.IntPtr EstimateVectors_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_setitem")]
  public static extern void EstimateVectors_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_AddRange")]
  public static extern void EstimateVectors_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_GetRange")]
  public static extern global::System.IntPtr EstimateVectors_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_Insert")]
  public static extern void EstimateVectors_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_InsertRange")]
  public static extern void EstimateVectors_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_RemoveAt")]
  public static extern void EstimateVectors_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_RemoveRange")]
  public static extern void EstimateVectors_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_Repeat")]
  public static extern global::System.IntPtr EstimateVectors_Repeat(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_Reverse__SWIG_0")]
  public static extern void EstimateVectors_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_Reverse__SWIG_1")]
  public static extern void EstimateVectors_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_EstimateVectors_SetRange")]
  public static extern void EstimateVectors_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_delete_EstimateVectors")]
  public static extern void delete_EstimateVectors(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_AlternativeUnifier_SWIGUpcast")]
  public static extern global::System.IntPtr AlternativeUnifier_SWIGUpcast(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("libdes", EntryPoint="CSharp_MinMaxNormalizer_SWIGUpcast")]
  public static extern global::System.IntPtr MinMaxNormalizer_SWIGUpcast(global::System.IntPtr jarg1);
}
