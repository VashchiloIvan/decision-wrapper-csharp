//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AggregationOperator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AggregationOperator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AggregationOperator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AggregationOperator obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~AggregationOperator() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libdesPINVOKE.delete_AggregationOperator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual WeightMap getEstimateVectorMark(MathModel normalizedMathModel, WeightCriteriaRelation weightCriteriaRelation) {
    WeightMap ret = new WeightMap(libdesPINVOKE.AggregationOperator_getEstimateVectorMark(swigCPtr, MathModel.getCPtr(normalizedMathModel), WeightCriteriaRelation.getCPtr(weightCriteriaRelation)), true);
    if (libdesPINVOKE.SWIGPendingException.Pending) throw libdesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getBestValue() {
    double ret = libdesPINVOKE.AggregationOperator_getBestValue(swigCPtr);
    return ret;
  }

  public virtual int getBestEstimateVectorNum() {
    int ret = libdesPINVOKE.AggregationOperator_getBestEstimateVectorNum(swigCPtr);
    return ret;
  }

  public virtual bool isNeedNormalizedMathModel() {
    bool ret = libdesPINVOKE.AggregationOperator_isNeedNormalizedMathModel(swigCPtr);
    return ret;
  }

}
