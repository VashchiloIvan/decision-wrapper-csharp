//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DecisionWrapperCsharp {

public class TwoCriteriaRelation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TwoCriteriaRelation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TwoCriteriaRelation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TwoCriteriaRelation obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TwoCriteriaRelation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libdesPINVOKE.delete_TwoCriteriaRelation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public TwoCriteriaRelation(int firstCriteriaId, CriteriaConstraint constraint, int secondCriteriaId) : this(libdesPINVOKE.new_TwoCriteriaRelation__SWIG_0(firstCriteriaId, (int)constraint, secondCriteriaId), true) {
  }

  public TwoCriteriaRelation(TwoCriteriaRelation other) : this(libdesPINVOKE.new_TwoCriteriaRelation__SWIG_1(TwoCriteriaRelation.getCPtr(other)), true) {
    if (libdesPINVOKE.SWIGPendingException.Pending) throw libdesPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getFirstCriteriaId() {
    int ret = libdesPINVOKE.TwoCriteriaRelation_getFirstCriteriaId(swigCPtr);
    return ret;
  }

  public int getSecondCriteriaId() {
    int ret = libdesPINVOKE.TwoCriteriaRelation_getSecondCriteriaId(swigCPtr);
    return ret;
  }

  public CriteriaConstraint getConstraint() {
    CriteriaConstraint ret = (CriteriaConstraint)libdesPINVOKE.TwoCriteriaRelation_getConstraint(swigCPtr);
    return ret;
  }

  public bool isValid() {
    bool ret = libdesPINVOKE.TwoCriteriaRelation_isValid(swigCPtr);
    return ret;
  }

  public bool isEqual(TwoCriteriaRelation relation) {
    bool ret = libdesPINVOKE.TwoCriteriaRelation_isEqual(swigCPtr, TwoCriteriaRelation.getCPtr(relation));
    if (libdesPINVOKE.SWIGPendingException.Pending) throw libdesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isRespond(TwoCriteriaRelation secondRelation) {
    bool ret = libdesPINVOKE.TwoCriteriaRelation_isRespond(swigCPtr, TwoCriteriaRelation.getCPtr(secondRelation));
    if (libdesPINVOKE.SWIGPendingException.Pending) throw libdesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TwoCriteriaRelation invert() {
    TwoCriteriaRelation ret = new TwoCriteriaRelation(libdesPINVOKE.TwoCriteriaRelation_invert(swigCPtr), true);
    return ret;
  }

  public CriteriaConstraint getInvertConstraint(CriteriaConstraint constraint) {
    CriteriaConstraint ret = (CriteriaConstraint)libdesPINVOKE.TwoCriteriaRelation_getInvertConstraint(swigCPtr, (int)constraint);
    return ret;
  }

}

}
